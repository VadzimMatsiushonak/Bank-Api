plugins {
    id "org.springframework.boot" version "2.7.5"
    id "io.spring.dependency-management" version "1.0.15.RELEASE"
    id "java"
    id "idea"
    id "jacoco"
    id "org.sonarqube" version "4.2.1.3168"
}

group = "by.vadzimmatsiushonak"
version = "0.0.1-SNAPSHOT"
sourceCompatibility = "11"

repositories {
    mavenCentral()
}

ext {
    swaggerVersion = "3.0.0"
    springBootVersion = "2.7.5"
    springDependencyManagementVersion = "1.0.15.RELEASE"
    springKafkaVersion = "2.9.2"
    springSecurityAuthorizationServerVersion = "0.3.1"
    gsonVersion = "2.10"
    mapstructVersion = "1.5.3.Final"
    lombokMapstructBindingVersion = "0.2.0"
    junitVersion = "5.7.1"
    mockitoVersion = "5.3.1"

    spring = [
            dataJpa     : "org.springframework.boot:spring-boot-starter-data-jpa",
            validation  : "org.springframework.boot:spring-boot-starter-validation",
            web         : "org.springframework.boot:spring-boot-starter-web",
            security    : "org.springframework.boot:spring-boot-starter-security",
            cache       : "org.springframework.boot:spring-boot-starter-cache",
            kafka       : "org.springframework.kafka:spring-kafka:$springKafkaVersion",
            test        : "org.springframework.boot:spring-boot-starter-test",
            securityTest: "org.springframework.security:spring-security-test"
    ]

    database = [
            h2           : "com.h2database:h2",
            mysql        : "com.mysql:mysql-connector-j",
            psql         : "org.postgresql:postgresql",
            liquibaseCore: "org.liquibase:liquibase-core",
    ]

    security = [
            authorizationServer: "org.springframework.security:spring-security-oauth2-authorization-server:$springSecurityAuthorizationServerVersion",
            resourceServer     : "org.springframework.boot:spring-boot-starter-oauth2-resource-server"
    ]

    swagger = [
            core   : "io.springfox:springfox-swagger2:$swaggerVersion",
            starter: "io.springfox:springfox-boot-starter:$swaggerVersion",
            ui     : "io.springfox:springfox-swagger-ui:$swaggerVersion",
    ]

    misc = [
            gson                  : "com.google.code.gson:gson:$gsonVersion",
            mapstruct             : "org.mapstruct:mapstruct:$mapstructVersion",
            lombok                : "org.projectlombok:lombok",
            mapstructProcessor    : "org.mapstruct:mapstruct-processor:$mapstructVersion",
            lombokProcessor       : "org.projectlombok:lombok",
            lombokMapstructBinding: "org.projectlombok:lombok-mapstruct-binding:$lombokMapstructBindingVersion",
            caffeine              : "com.github.ben-manes.caffeine:caffeine",
    ]

    tests = [
            junitJupiter          : "org.junit.jupiter:junit-jupiter:$junitVersion",
            junitJupiterEngine    : "org.junit.jupiter:junit-jupiter-engine:$junitVersion",
            mockitoCore           : "org.mockito:mockito-core:$mockitoVersion"
    ]
}

dependencies {
    implementation spring.dataJpa, spring.validation, spring.web, spring.security, spring.kafka, spring.cache

    implementation database.liquibaseCore
    runtimeOnly database.h2, database.mysql, database.psql

    implementation security.authorizationServer, security.resourceServer

    implementation swagger.core, swagger.starter, swagger.ui

    implementation misc.gson, misc.mapstruct, misc.caffeine
    compileOnly misc.lombok
    annotationProcessor misc.mapstructProcessor, misc.lombokProcessor, misc.lombokMapstructBinding

    testImplementation spring.test, spring.securityTest, tests.junitJupiter, tests.mockitoCore
    testRuntimeOnly tests.junitJupiterEngine
}

jacoco {
    toolVersion = "0.8.7"
    reportsDir = file("$buildDir/jacoco")
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report

    reports {
        xml.enabled true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    "**/generated/**",
                    "**/config/**",
                    "**/api/BankApiApplication.class",
                    "**/api/annotation/**",
                    "**/api/constant/**",
                    "**/api/exception/**",
                    "**/api/mapper/**",
                    "**/api/model/**",
                    "**/api/repository/**",
                    "**/api/util/**"
            ])
        }))
    }
}

sonar {
    properties {
        property "sonar.host.url", "http://localhost:9000"
        property "sonar.projectKey", "Bank-Api"
        property "sonar.projectName", "'Bank-Api'"
        property "sonar.token", "sqp_1fee55340af7be2ea82ec4720e47ef92b521d158"
        property "srv.sonar.exclusions", "src/main/resources/**/*, **/BankApiApplication.java, **/generated/**"
        property "sonar.coverage.exclusions", "**/BankApiApplication.java, **/generated/**, **/config/**, **/api/annotation/**, **/api/constant/**, **/api/exception/**, **/api/mapper/**, **/api/model/**, **/api/repository/**, **/api/util/**"
        property "sonar.coverage.jacoco.xmlReportPaths", "build/jacoco/test/jacocoTestReport.xml"
    }
}

tasks.named("test") {
    useJUnitPlatform()
}
